syntax = "proto3";
package croissantbit;

import "framedata.proto";
import "metadata.proto";
import "signaldata.proto";
import "player.proto";

// Each message gets a unique ID, starting at 1 and incrementing by 1 for each
// message. ´main.options´ file must be updated to include the new message.

// Clientbound & Serverbound
message Ping {}

// Clientbound & Serverbound
message Pong {}

// Serverbound
message RegisterClientRequest {
  VideoInfo video_info = 1;
  AudioInfo audio_info = 2;
  SignalInfo signal_info = 3;
  bool can_control = 4; // The client is capable of controlling the server and
                        // display further information in the UI
}

// Clientbound
message RegisterClientResponse {
  int32 client_id = 1;
  PlayerState state = 2;
}

// Clientbound
message VideoFrameUpdate { Pixel pixel = 1; }

// Clientbound
message AudioFrameUpdate {}

// Serverbound
message VideoMetadataRequest { repeated int32 video_ids = 1; }

// Serverbound
message VideoMetadataListRequest {
  int32 per_page = 1;
  int32 page = 2;
}

// Clientbound
// Response to both VideoMetadataListRequest and VideoMetadataRequest
message VideoMetadataResponse { repeated VideoMetadata videos_metadata = 1; }

// Clientbound
message SignalSequenceFrameUpdate { repeated SignalSequence signals = 1; }

// Serverbound
// Example: Send on press of a button
message SignalUpdateRequest { SignalDirection direction = 1; }

// Clientbound
// Confirm that the signal was received within a time frame to count
message SignalUpdateResponse { bool success = 1; }

// Serverbound
message DeviceInfoRequest { repeated int32 device_ids = 1; }

// Serverbound
message DeviceInfoListRequest {
  int32 per_page = 1;
  int32 page = 2;
}

// Clientbound
// Response to both DeviceInfoRequest and DeviceInfoListRequest
message DeviceInfoResponse { repeated DeviceInfo devices = 1; }

// Serverbound
message PlayerPlayRequest { int32 video_id = 1; }

// Serverbound
message PlayerStopRequest {}

// Clientbound
// Response to both PlayerPlayRequest and PlayerStopRequest
message PlayerRequestResponse { bool success = 1; }

// Clientbound
// Broadcasts message to all clients
message PlayerStateUpdate {
  PlayerState state = 1;
  VideoMetadata video_metadata = 2;
}
